name: Deploy Backend to Google Cloud Run

# remove the hotfix branch when merging the hotfix branch to main

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # The service account in this step only has access to Google Cloud Run (it needs to be used to run gcloud commands)
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_DEPLOYMENT_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    # Step 4: Configure Docker to use gcloud as a credential helper
    - name: Configure Docker for Google Artifact Registry
      run: |
        gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

    - name: Create Artifact Registry Repository (if it doesn't exist)
      run: |
        gcloud artifacts repositories create pulse-backend \
          --repository-format=docker \
          --location=${{ secrets.REGION }} \
          --description="Docker repository for pulse-backend" || echo "Repository already exists."

    - name: Build Docker image for backend
      run: |
        docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/pulse-backend/image-${{ github.sha }} .

    - name: Push Docker image to Google Artifact Registry
      run: |
        docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/pulse-backend/image-${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy pulse-backend \
          --image="${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/pulse-backend/image-${{ github.sha }}" \
          --region="${{ secrets.REGION }}" \
          --platform managed \
          --ingress all \
          --cpu-throttling \
          --memory=2Gi \
          --min-instances 0 \
          --max-instances 10 \
          --port 8000 \
          --set-env-vars GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}

    # TODO: Separate this step into its own workflow (I think that's a good idea because it isn't technically necessary for cloud deployment?)
    # The service account in this step only has access to Google Cloud Secret Manager (the docker image needs to be able to access the secrets)
    - name: Run Migrations on the production database
      run: |
        echo ${{ secrets.GCP_SECRET_ACCESSOR_SA_KEY_BASE64 }} | base64 -d > /tmp/gcp-key.json && \
        docker run --rm \
          -e K_SERVICE=foo \
          -e GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }} \
          -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json \
          -v /tmp/gcp-key.json:/app/gcp-key.json \
          ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/pulse-backend/image-${{ github.sha }} \
          python manage.py migrate 